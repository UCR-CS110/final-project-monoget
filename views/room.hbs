<link rel="stylesheet" href="/css/room.css">
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
{{!-- important to reference jquery before bootstrap --}}
<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>


<nav class="navbar navbar-expand-md bg-dark text-white">
  <ul class="navbar-nav mr-auto">
    <li class="nav-item">
      <a class="nav-link link-light" href="/home">Chatroom</a>
    </li>
  </ul>
  <div class="ml-auto">
    <ul class="navbar-nav">
      <li class="nav-item">
      <a class="nav-link link-light" href="/profile">My Profile</a>
      </li>

      <li class="nav-item">
        <a id="sign-out" class="nav-link link-light" href="#">Sign Out</a>
      </li>
    </ul>
  </div>
</nav>

<h1 class="title"> {{roomName}} </h1>
<input type="text" id="filterInput" placeholder="Please enter a filter" value="" oninput="updateFilter(this.value)"/>
<br>
{{!-- <p>This is a demo of chatroom page</p>
<p>
    The room you are visiting is {{ roomName }}.
</p>
<p>To generate a new room, here is the room id: {{ newRoomId }}</p> --}}
<div class="container">
    <div class="row">
        <div class="col-md-12">
            <div class="modal fade" id="myModal">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h1>Edit Comment</h1>
                        </div>
                        <div class="modal-body">
                            <textarea id="textMsg" value=""></textarea>
                        </div>
                        <div class="modal-footer">
                            <input name="" id="updateInput" type="button" class="btn btn-primary" data-dismiss="modal" value="Save" onclick="updateMsg(this.name)">
                            <input name="" id="deleteInput" type="button" class="btn btn-danger" data-dismiss="modal" value="Delete" onclick="deleteMsg(this.name)">
                            <input type="button" class="btn btn-dark" data-dismiss="modal" value="Close">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    let filterVal = "";
    const updateFilter = (value) => {
        let filterInput = document.getElementById('filterInput')
        filterVal = value;
    }

    let data = {token: localStorage.getItem("token")};

    let userData = null

    let userName = null;

    window.addEventListener('load', function () {
    /*while (userName === null || userName === "") {
            userName = prompt('Please enter a username.');
        }*/
    initialize();
    document.getElementById('post').addEventListener('click', () => {submit()});
    document.getElementById('sign-out').addEventListener('click', () => {signOut()});
    });
    
    const initialize = async () => {
        console.log(data);
        console.log(data.token);
        userData = await fetch("/api/userData", {
                method: "POST",
                headers: {"Content-Type": "application/json"},
                body: JSON.stringify(data)
            }).then((res)=>res.json());
        userName = userData.username;
    }

    const submit = () => {
        if(document.getElementById('content').value.trim() === "") {
            return;
        }
        console.log("My username: " + userName);
        const data = {
            roomName: document.getElementById('roomName').value,
            userName: userName,
            content: document.getElementById('content').value
        }
        const response = fetch("http://localhost:8080/message", {
            method: "POST",
            headers: {"Content-Type": "application/json"},
            body: JSON.stringify(data)
        }).then(document.getElementById('content').value = "");
    };

    const filter = (messages, filterVal) => {
        if (filterVal.trim() === "") {
            return messages;
        } 
        const results = messages.filter((i) => {
            //console.log(i.content);
            return i.content.toLowerCase().search(filterVal.trim().toLowerCase()) != -1 || i.username.toLowerCase().search(filterVal.trim().toLowerCase()) != -1;
        });
        console.log(typeof(results))
        return results;

    }

    const updateVote = async (messageId, value) => {
        //console.log(messageId, value);
        let data = {
            vote: value,
            messageID: messageId
        };
        await fetch(`http://localhost:8080/vote`, {
            method: "POST",
            headers: {"Content-Type" : "application/json"},
            body: JSON.stringify(data)
        });
    };

    const editModal = (messages, messageId) => {
        //use name key in element to stash messageID since the default id key is unique to each element"
        let deleteInput = document.getElementById('deleteInput');
        deleteInput.name = messageId;
        let updateInput = document.getElementById('updateInput');
        updateInput.name = messageId;
        
        let modalBody = document.getElementById('textMsg');
        for (let message of messages) {
            if (message.messageID === messageId) {
                modalBody.value = message.content;
                return;
            }
        }

    }

    const deleteMsg = async (messageId) => {
        let data = {
            messageID: messageId
        };
        await fetch(`http://localhost:8080/deleteMsg`, {
            method: "DELETE",
            headers: {"Content-Type" : "application/json"},
            body: JSON.stringify(data)
        });
    }
    
    const updateMsg = async (messageId) => {
        let newMsg = document.getElementById('textMsg').value;
        let data = {
            messageID: messageId,
            newMessage: newMsg
        };
        await fetch(`http://localhost:8080/updateMsg`, {
            method: "POST",
            headers: {"Content-Type" : "application/json"},
            body: JSON.stringify(data)
        });
        //console.log(newMsg, messageId);
        
    }

    const signOut = async () => {
        await localStorage.clear();
        window.location.replace("/login");
    }

    const loadProfile = async (username) => {
        let data = {view: true};
        await fetch(`/profile/${username}`, {
                method: "GET"
            });
    }

    const load = window.setInterval(async () => {
        fetch("http://localhost:8080/getMessages").
        then(res => res.json()).then(data=> {

            var roomName = document.getElementById('roomName');
            var container = document.getElementById('messageContainer');
            container.innerHTML = "";
            
            var messages = [];
            //var containerChildren = container.children;
            
            //for (var i = 0; i < containerChildren.length; i++) {
            
            //}
            for (var i = 0; i < data.length; i++) {
                if (data[i].room === roomName.value) {
                    messages.push(data[i]);
                }
                //console.log(messages);
            }

            messages = filter(messages, filterVal);
            //for future reference use let and const rather than var 
            for (var j = 0; j < messages.length; j++) {
                var header = document.createElement('div');
                header.id = "headerMessage";
                var firstDiv = document.createElement('div');
                firstDiv.id = messages[j]._id;
                const secondDiv = document.createElement('a');
                const profUsername = messages[j].username;
                secondDiv.id = "username";
                secondDiv.innerHTML = profUsername;
                secondDiv.addEventListener("click", () => {loadProfile(profUsername)});
                secondDiv.setAttribute("href", `/profile/${profUsername}`);

                var thirdDiv = document.createElement('div'); 
                thirdDiv.id = "date";
                var d = new Date(messages[j].dateEntry);
                thirdDiv.innerHTML = d.toLocaleDateString() + "<br/>" + d.toLocaleTimeString();
                if (messages[j].username === userName) {
                    const editB = document.createElement('button');
                    editB.setAttribute("type", "button");
                    editB.setAttribute("class", "btn btn-primary");
                    editB.setAttribute("data-toggle", "modal");
                    editB.setAttribute("data-target", "#myModal");
                    editB.innerHTML = "Edit";
                    let messageID = messages[j].messageID;
                    editB.addEventListener("click", () => {editModal(messages, messageID)});
                    //console.log(messageID);
                    thirdDiv.innerHTML += "<br/>";
                    thirdDiv.appendChild(editB);
                }
                
                
                header.appendChild(secondDiv);
                header.appendChild(thirdDiv);

                var fourthDiv = document.createElement('div');
                fourthDiv.id = "message";
                fourthDiv.innerHTML = messages[j].content;
                var messageDiv = document.createElement('div');
                messageDiv.id = "individualMessage";
                messageDiv.appendChild(firstDiv);
                messageDiv.appendChild(header);
                messageDiv.appendChild(fourthDiv);
                //container.appendChild(messageDiv); 

                const voteMessageDiv = document.createElement('div');
                voteMessageDiv.id = messages[j].messageID
                voteMessageDiv.className = 'voteAndMessage';
                voteMessageDiv.appendChild(messageDiv);

                var voteCount = document.createElement('div');
                voteCount.id = "voteCount";
                var upVote = document.createElement('BUTTON');
                upVote.innerHTML = "^";
                upVote.addEventListener('click', () => updateVote(voteMessageDiv.id, 1));

                var vote = document.createElement('div');
                vote.id = "vote"
                vote.innerHTML = messages[j].votes; 

                var downVote = document.createElement('BUTTON');
                downVote.innerHTML = "v";
                downVote.addEventListener('click', () => updateVote(voteMessageDiv.id, -1));
                voteCount.appendChild(upVote);
                voteCount.appendChild(vote);
                voteCount.appendChild(downVote);

                voteMessageDiv.appendChild(voteCount);
                container.appendChild(voteMessageDiv);

            }
        });
    }, 500);
</script>


{{#if isAvailable}}
<div id="chatBox">
    <div id="messageContainer">
        
    </div>
</div>
{{/if}}
<div class = "chatInput"> 
    <form class="inputForm" onsubmit="return false">
            <input id='roomName' type="hidden" name="roomName" value="{{roomName}}"/>
            
            <textarea id="content" type="text" name="content" placeholder="Enter your message" required></textarea>
            
            <input class="btn btn-dark" id="post" type="submit" value="Post"> 
    </form>
</div>
